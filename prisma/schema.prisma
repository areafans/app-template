// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CHILD
  PARENT
  SUPPORTER
  PARTNER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

enum PaymentType {
  ONE_TIME
  SUBSCRIPTION
  DONATION
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(PARENT)
  status                UserStatus             @default(PENDING_VERIFICATION)
  phoneNumber           String?                @map("phone_number")
  dateOfBirth           DateTime?              @map("date_of_birth")
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  lastLoginAt           DateTime?              @map("last_login_at")
  
  // Relationships
  accounts              Account[]
  sessions              Session[]
  payments              Payment[]
  subscriptions         Subscription[]
  notifications         Notification[]
  parentChildren        User[]                 @relation("ParentChild")
  childParents          User[]                 @relation("ParentChild")
  supportedUsers        User[]                 @relation("SupporterSupported")
  supporters            User[]                 @relation("SupporterSupported")
  partnerRelationships  PartnerRelationship[]  @relation("UserPartner")
  partnerOf             PartnerRelationship[]  @relation("PartnerOf")
  auditLogs             AuditLog[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Payment {
  id                String        @id @default(cuid())
  userId            String        @map("user_id")
  stripePaymentId   String?       @unique @map("stripe_payment_id")
  amount            Int           // Amount in cents
  currency          String        @default("usd")
  type              PaymentType
  status            PaymentStatus @default(PENDING)
  description       String?
  metadata          Json?
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Subscription {
  id                     String             @id @default(cuid())
  userId                 String             @map("user_id")
  stripeSubscriptionId   String?            @unique @map("stripe_subscription_id")
  stripePriceId          String?            @map("stripe_price_id")
  status                 SubscriptionStatus @default(INACTIVE)
  currentPeriodStart     DateTime?          @map("current_period_start")
  currentPeriodEnd       DateTime?          @map("current_period_end")
  cancelAtPeriodEnd      Boolean            @default(false) @map("cancel_at_period_end")
  createdAt              DateTime           @default(now()) @map("created_at")
  updatedAt              DateTime           @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Notification {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  title       String
  message     String    @db.Text
  type        String    // email, push, in-app
  isRead      Boolean   @default(false) @map("is_read")
  readAt      DateTime? @map("read_at")
  scheduledAt DateTime? @map("scheduled_at")
  sentAt      DateTime? @map("sent_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model PartnerRelationship {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  partnerId   String   @map("partner_id")
  type        String   // business, organization, individual
  status      String   @default("active") // active, inactive, pending
  permissions Json?    // Custom permissions for this partnership
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user    User @relation("UserPartner", fields: [userId], references: [id], onDelete: Cascade)
  partner User @relation("PartnerOf", fields: [partnerId], references: [id], onDelete: Cascade)

  @@unique([userId, partnerId])
  @@map("partner_relationships")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?  @map("user_id")
  action    String   // LOGIN, LOGOUT, PAYMENT, etc.
  resource  String?  // What was affected
  details   Json?    // Additional context
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

model AppSettings {
  id                    String   @id @default(cuid())
  key                   String   @unique
  value                 String   @db.Text
  description           String?
  isPublic              Boolean  @default(false) @map("is_public")
  updatedAt             DateTime @updatedAt @map("updated_at")

  @@map("app_settings")
}